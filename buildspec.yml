version: 0.2

env:
  variables:
    REPORT_BUCKET: devsecopsreportsgenai
    REPORT_PATH: devsecops-genai/reports
    SNS_TOPIC_ARN: arn:aws:sns:us-east-1:545779432619:devsecopsgenai
    TARGET_URL: http://devsecopsgenai-staging.eba-3u9au2bw.us-east-1.elasticbeanstalk.com/

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo Installing dependencies...
      - apt-get update
      - apt-get install -y unzip wget zip curl
      - echo Installing Trivy...
      - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
      - echo Preparing vulnerable JAR for scanning...
      - mkdir -p target
      - wget -O target/log4j-core-2.14.1.jar https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-core/2.14.1/log4j-core-2.14.1.jar

  pre_build:
    commands:
      - echo Running Trivy SCA Scan...
      - mkdir -p trivy-reports
      - ./bin/trivy fs target/ --scanners vuln --vuln-type library --format json -o trivy-reports/trivy-scan-report.json || echo "Trivy scan completed with warnings."

  build:
    commands:
      - echo Running Maven Build with JaCoCo...
      - mvn clean verify

      - echo Fetching SonarCloud token from SSM...
      - export SONAR_TOKEN=$(aws ssm get-parameter --name /devsecops-genai/sonar/token --with-decryption --query "Parameter.Value" --output text)

      - echo Resolving Git branch for SonarCloud...
      - |
        if [[ "$CODEBUILD_SOURCE_VERSION" == refs/heads/* ]]; then
          export BRANCH_NAME=$(echo $CODEBUILD_SOURCE_VERSION | sed 's#refs/heads/##')
        else
          export BRANCH_NAME="main"
        fi
        echo Using branch: $BRANCH_NAME

      - echo Running SonarCloud Analysis...
      - |
        mvn sonar:sonar \
          -Dsonar.projectKey=sairam18011996_devsecops-genai \
          -Dsonar.organization=sairam \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.branch.name=$BRANCH_NAME || echo "SonarCloud analysis failed, continuing..."

  post_build:
    commands:
      - echo Uploading JaCoCo and Trivy reports to S3...
      - aws s3 cp target/site/jacoco/ s3://$REPORT_BUCKET/$REPORT_PATH/jacoco/ --recursive --sse AES256 --no-guess-mime-type
      - aws s3 cp trivy-reports/ s3://$REPORT_BUCKET/$REPORT_PATH/trivy-sca/ --recursive --sse AES256

      - echo Zipping JaCoCo report...
      - zip -r jacoco-report.zip target/site/jacoco/
      - aws s3 cp jacoco-report.zip s3://$REPORT_BUCKET/$REPORT_PATH/jacoco-report.zip --sse AES256

      - echo Fetching SonarCloud issues from Web API...
      - |
        curl -u $SONAR_TOKEN: \
          "https://sonarcloud.io/api/issues/search?componentKeys=sairam18011996_devsecops-genai&types=BUG,VULNERABILITY,CODE_SMELL&resolved=false&ps=50" \
          -o sonarcloud-issues.json
        aws s3 cp sonarcloud-issues.json s3://$REPORT_BUCKET/$REPORT_PATH/sonarcloud/sonarcloud-issues.json --sse AES256

      - echo Preparing SNS message...
      - |
        echo -e "✅ CodeBuild completed for *DevSecOps GenAI* ✅\n\n📦 JaCoCo Report (ZIP): $JACOCO_ZIP_URL\n\n🔍 Trivy SCA Report (JSON): $SCA_URL\n\n🧠 GenAI SCA Remediation (Text): $GENAI_SCA_URL\n\n🧪 GenAI Code Coverage Test Suggestions: $GENAI_COVERAGE_URL\n\n🔐 SonarCloud Dashboard: https://sonarcloud.io/project/overview?id=sairam18011996_devsecops-genai" > message.txt

      - echo Sending SNS Notification...
      - |
        aws sns publish \
          --region us-east-1 \
          --topic-arn "$SNS_TOPIC_ARN" \
          --subject "✅ CodeBuild Success: DevSecOps Reports with GenAI" \
          --message file://message.txt

      - echo Invoking Lambda for Security Hub finding submission...
      - |
        aws lambda invoke \
          --function-name SendReportsToSecurityHub \
          --region us-east-1 \
          --invocation-type Event \
          --payload '{}' \
          output.json || echo "SecurityHub Lambda failed to invoke."

      - echo Invoking GenAI Lambda for Bedrock-based analysis...
      - |
        aws lambda invoke \
          --function-name SendToBedrockGenAI \
          --region us-east-1 \
          --invocation-type Event \
          --payload '{}' \
          bedrock_output.json || echo "Bedrock Lambda failed to invoke."

      - echo "✅ All reports processed and uploaded successfully."

reports:
  jacoco:
    files:
      - index.html
    base-directory: target/site/jacoco
    discard-paths: yes

artifacts:
  files:
    - target/ROOT.war
  discard-paths: yes
